import React, { useEffect, useState } from 'react';
import { Divider, Table, TextField, TableBody, TableHead, TableRow, TableCell, TableContainer, Paper, Button, Toolbar, Typography, IconButton, Menu, MenuItem, Select, FormControl, InputLabel, Box } from '@mui/material';
import FilterListIcon from '@mui/icons-material/FilterList';
import DownloadIcon from '@mui/icons-material/Download';
import DeleteIcon from '@mui/icons-material/Delete';
import { fetchEmployeeSalaries, getAllEmployeeData } from '../../services/api';
import ResNavbar from '../../component/restauretNavbar/ResNavbar';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import logo from '../../Assests/white.jpg';

function EmployeePaysalaries() {

  const [originalEmployeeSalaries, setOriginalEmployeeSalaries] = useState([]);
  const [employeeSalaries, setEmployeeSalaries] = useState([]);
  const [anchorEl, setAnchorEl] = useState(null);
  const [employeeIDs, setEmployeeIDs] = useState([]);
  const [filterCriteria, setFilterCriteria] = useState({
    employeeId: '',
    year: '',
    month: ''
  });

  const handleFilterClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleFilterClose = () => {
    setAnchorEl(null);
  };

  const handleFilterApply = () => {
    // Filter the original employee salaries based on the selected criteria
    const data = originalEmployeeSalaries.filter(empsal =>{
      const salaryDate = new Date(empsal.createdAt);
      const slaryyear = salaryDate.getFullYear();
      const slarymonth = salaryDate.getMonth() + 1;
  
      // Check if all filter criteria match, or if they are empty (meaning not applied)
      const matchEmpId = !filterCriteria.employeeId || empsal.empId === filterCriteria.employeeId;
      const matchYear = !filterCriteria.year || slaryyear === parseInt(filterCriteria.year);
      const matchMonth = !filterCriteria.month || slarymonth === parseInt(filterCriteria.month);
  
      return matchEmpId && matchYear && matchMonth;
    });
  
    // Update the state with the filtered data
    setEmployeeSalaries(data);
  
    setAnchorEl(null); // Close the filter popup after applying
  };
  

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFilterCriteria({ ...filterCriteria, [name]: value });
  };

  const generatePDF = () => {
    // Initialize jsPDF
    const doc = new jsPDF();

    // Set document properties
    doc.setProperties({
      title: 'Employee Salary Report',
      subject: 'Generated by Your App',
      author: 'Your Name',
    });

    // Define table columns
    const tableColumn = ['Employee ID', 'Basic Salary', 'Net Salary', 'Bonus'];

    // Define table rows
    const tableRows = employeeSalaries.map((salaryData) => [
      salaryData.empId,
      salaryData.basicEmpSalary,
      salaryData.Fsalary,
      salaryData.bonus,
    ]);

    // Add an image/logo to the PDF (optional)
    const img = new Image();
    img.src = logo; // Assuming logo is the path to your logo image
    doc.addImage(img, 'JPEG', 10, 5, 30, 30); // Adjust coordinates and size as needed
    doc.setFontSize(16)
    doc.text('Restaurant Reservation and Food Ordering System', 50, 20); // Add a title to the PDF (optional	)

    //add hirizontal line
    doc.setLineWidth(0.5);
    doc.line(10, 30, doc.internal.pageSize.getWidth() - 10, 30);

    // Add a title to the PDF
    doc.text('Employee Salary Report', 70, 40);

    // Add the table to the PDF
    doc.autoTable({
      head: [tableColumn],
      body: tableRows,
      startY: 50, // Adjust the vertical starting point of the table
    });

    // Save the PDF
    doc.save('employee_salary_report.pdf');
  };

  //get all employee salary data
  useEffect(() => {
    const fetchEmployeeIDs = async () => {
      try {
        const Empdata = await getAllEmployeeData();
        const ids = Empdata.map(item => item.empId);
        setEmployeeIDs(ids);
      } catch (error) {
        console.error('Error fetching employee IDs:', error);
      }
    };

    const getAllEmployeeSalaryData = async () => {
      try {
        const salaryData = await fetchEmployeeSalaries();
        setOriginalEmployeeSalaries(salaryData); // Store original data
        setEmployeeSalaries(salaryData); // Set both original and filtered data
        console.log(salaryData);
      } catch (error) {
        console.error('Error fetching employee salaries:', error);
      }
    };

    fetchEmployeeIDs();
    getAllEmployeeSalaryData();
  }, []); // Add any dependencies as needed

  return (
    <div>
      <ResNavbar/>
      <div className="Inv-dashborad">
        <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
          Employee Paysalaries
        </Typography>
        <Divider style={{ marginBottom: '16px' }} />
        <Toolbar>
          <IconButton color="inherit" onClick={handleFilterClick}>
            <FilterListIcon />
          </IconButton>
          <IconButton color="inherit" onClick={generatePDF}>
            <DownloadIcon />
          </IconButton>
        </Toolbar>
        <TableContainer component={Paper}>
          <Table aria-label="simple table">
            <TableHead>
              <TableRow sx={{ bgcolor: 'lightblue' }}>
                <TableCell>Employee ID</TableCell>
                <TableCell>Basic Salary</TableCell>
                <TableCell>Net Salary</TableCell>
                <TableCell>Bonus</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {employeeSalaries.map((salaryData) => (
                <TableRow key={salaryData._id}>
                  <TableCell>{salaryData.empId}</TableCell>
                  <TableCell>{salaryData.basicEmpSalary}</TableCell>
                  <TableCell>{salaryData.Fsalary}</TableCell>
                  <TableCell>{salaryData.bonus}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        {/* Filter Popup */}
        <Menu
          open={Boolean(anchorEl)}
          anchorEl={anchorEl}
          onClose={handleFilterClose}
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'left',
          }}
          transformOrigin={{
            vertical: 'top',
            horizontal: 'left',
          }}
        >
          <Box p={2}>
            <FormControl sx={{ m: 1, minWidth: 120 }}>
              <TextField
                select
                labelId="employeeId-label"
                id="employeeId"
                name="employeeId"
                value={filterCriteria.employeeId}
                onChange={handleInputChange}
                label="Emp Id"
              >
                {employeeIDs.map((id) => (
                  <MenuItem key={id} value={id}>
                    {id}
                  </MenuItem>
                ))}
              </TextField>
            </FormControl>
            <FormControl sx={{ m: 1, minWidth: 120 }}>
              <TextField
                select
                labelId="restaurantId-label"
                id="year"
                name="year"
                value={filterCriteria.year}
                onChange={handleInputChange}
                label="Year"
              >
                <MenuItem value={2024}>2024</MenuItem>
                <MenuItem value={2023}>2023</MenuItem>
                <MenuItem value={2022}>2022</MenuItem>
                {/* Add dropdown options here */}
              </TextField>
            </FormControl>
            <FormControl sx={{ m: 1, minWidth: 120 }}>
              <TextField
                select
                labelId="position-label"
                id="month"
                name="month"
                value={filterCriteria.position}
                onChange={handleInputChange}
                label="Month"
              >
                <MenuItem value={1}>Jan</MenuItem>
                <MenuItem value={2}>Feb</MenuItem>
                <MenuItem value={3}>Mar</MenuItem>
                <MenuItem value={4}>Apr</MenuItem>
                <MenuItem value={5}>May</MenuItem>
                <MenuItem value={6}>Jun</MenuItem>
                <MenuItem value={7}>Jul</MenuItem>
                <MenuItem value={8}>Aug</MenuItem>
                <MenuItem value={9}>Sep</MenuItem>
                <MenuItem value={10}>Oct</MenuItem>
                <MenuItem value={11}>Nov</MenuItem>
                <MenuItem value={12}>Dec</MenuItem>
                {/* Add dropdown options here */}
              </TextField>
            </FormControl>
            <Button variant="contained" onClick={handleFilterApply}>Apply</Button>
          </Box>
        </Menu>
      </div>
    </div>
  );
}

export default EmployeePaysalaries;
